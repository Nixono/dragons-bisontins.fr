<?php

/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */
class Misc {

	/**
	 * @access public
	 * @param array $arr_array 
	 * @param string $str_field 
	 * @param mixed $mix_defaultValue 
	 * @return mixed
	 */
	public final static function extractDataIfSet($arr_array, $str_field, $mix_defaultValue) {
		if (isset($arr_array[$str_field])) {
			if (is_array($arr_array[$str_field])) {
				if (get_magic_quotes_gpc()) {
					foreach ($arr_array[$str_field] as $k => $v)
						$arr_array[$str_field][$k] = !is_array($v) ? stripslashes($v) : $v;
				}
				return $arr_array[$str_field];
			}
			$value = trim($arr_array[$str_field]);
			if (get_magic_quotes_gpc())
				$value = stripslashes($value);
			if ($value == '')
				return $mix_defaultValue;
			return $value;
		}
		return $mix_defaultValue;
	}

	/**
	 * @access public
	 * @param mixed $mix_reference 
	 * @param mixed $mix_compare 
	 * @return string
	 */
	public final static function displaySelected($mix_reference, $mix_compare) {#Misc::debug($mix_reference);Misc::debug($mix_compare);
		if (is_array($mix_reference)) {
			if (in_array($mix_compare, $mix_reference))
				return ' selected="selected"';
			return '';
		}
		if ($mix_reference == $mix_compare)
			return ' selected="selected"';
		return '';
	}

	/**
	 * @access public
	 * @param mixed $mix_reference 
	 * @param mixed $mix_compare 
	 * @return string
	 */
	public final static function displayChecked($mix_reference, $mix_compare) {
		if (is_array($mix_reference)) {
			if (in_array($mix_compare, $mix_reference))
				return ' checked="checked"';
			return '';
		}
		if ($mix_reference == $mix_compare)
			return ' checked="checked"';
		return '';
	}

	/**
	 * @access public
	 * @param string $str_mail 
	 * @return string
	 */
	public final static function protectMail($str_mail) {
		$protectedMail = '';
		for ($c = 0; $c < strlen($str_mail); $c++)
			$protectedMail .= '&#0' . ord(substr($str_mail, $c, 1)) . ';';
		return $protectedMail;
	}

	/**
	 * @access public
	 * @param string $str_mail 
	 * @return boolean
	 */
	public final static function isValidMail($str_mail) {
		return preg_match("`^([a-zA-Z0-9_\.-]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|([a-zA-Z0-9\.-]+))\.([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$`", $str_mail);
	}

	public final static function unAmp($str_str) {
		return str_replace('&', '&amp;', str_replace('&amp;', '&', $str_str));
	}

	/**
	 * @access public
	 * @param string $str_string 
	 * @return string
	 */
	public final static function cleanString($str_string) {
		// on commence par supprimer les espaces à gauche et à droite
		$string = trim($str_string);
		// nettoyage des caractères accentués et divers
		$searches = array();
		$searches[] = array('à', 'â', 'ä', 'ã', 'á', 'å', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å');
		$searches[] = array('æ', 'Æ');
		$searches[] = array('ç', 'Ç');
		$searches[] = array('é', 'è', 'ê', 'ë', 'É', 'È', 'Ê', 'Ë');
		$searches[] = array('î', 'ï', 'ì', 'í', 'Ì', 'Í', 'Î', 'Ï');
		$searches[] = array('ñ', 'Ñ');
		$searches[] = array('ô', 'ö', 'ð', 'ò', 'ó', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö');
		$searches[] = array('?', '?');
		$searches[] = array('ù', 'ú', 'û', 'ü', 'Ù', 'Ú', 'Û', 'Ü');
		$searches[] = array('ý', 'ÿ', 'Ý', '?');
		$searches[] = array("'", '"', '&', '#', ':', ',', ';', '!', '?', '.', '/', '§', '$', '¤', '£', '^', '¨', '%', '*', 'µ', '+', '*', '{', '(', '[', '|', '\\', '^', '@', ')', ']', '°', '}', '=', '<', '>', '`', '«', '»');
		$searches[] = array("\r", "\n");
		//$searches[] = array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') ;
		//if ($notiret)
		//  $searches[] = '-' ;

		$replaces = array();
		$replaces[] = 'a';
		$replaces[] = 'ae';
		$replaces[] = 'c';
		$replaces[] = 'e';
		$replaces[] = 'i';
		$replaces[] = 'n';
		$replaces[] = 'o';
		$replaces[] = 'oe';
		$replaces[] = 'u';
		$replaces[] = 'y';
		$replaces[] = ' ';
		$replaces[] = ' ';
		//$replaces[] = '' ;
		//if ($notiret)
		//  $replaces[] = '' ;

		for ($i = 0; $i < count($replaces); $i++)
			$string = str_replace($searches[$i], $replaces[$i], $string);

		$string = trim($string);
		// on vire tous les espaces qui se suivent
		$string = preg_replace("`([[:space:]])+`", '-', $string);
		return $string;
	}

	/**
	 * @access public
	 * @param string $str_date 
	 * @param string $str_format 
	 * @param string $str_locale 
	 * @return string
	 */
	public final static function formatDate($str_date, $str_format, $str_locale = 'fr') {
		if (empty($str_format))
			return $str_date;
		$aaaa = date('Y');
		$mm = date('m');
		$jj = date('d');
		$h = $mn = $s = 0;
		if (preg_match('`([0-9]{4})-([0-9]{2})-([0-9]{2})( ([0-9]{2}):([0-9]{2}):([0-9]{2}))?`', $str_date, $regs)) {
#Misc::debug($regs);
#Misc::debug($str_locale);
			$aaaa = $regs[1];
			$mm = $regs[2];
			$jj = $regs[3];
			$h = $mn = $s = 0;
			if (count($regs) > 4) {
				$h = $regs[5];
				$mn = $regs[6];
				$s = $regs[7];
			}
		} elseif (preg_match('`[0-9]{14}`', $str_date)) {
			$aaaa = substr($str_date, 0, 4);
			$mm = substr($str_date, 4, 2);
			$jj = substr($str_date, 6, 2);
			$h = substr($str_date, 8, 2);
			$mn = substr($str_date, 10, 2);
			$s = substr($str_date, 12, 2);
		} elseif (preg_match('`([0-9]{2}):([0-9]{2}):([0-9]{2})`', $str_date, $regs)) {
			$h = $regs[1];
			$mn = $regs[2];
			$s = $regs[3];
		}

		$s = (int) $s;
		$mn = (int) $mn;
		$h = (int) $h;
		$jj = (int) $jj;
		$mm = (int) $mm;
		$aaaa = (int) $aaaa;

#Misc::debug("\$h=$h, \$mn=$mn, \$s=$s, \$mm=$mm, \$jj=$jj, \$aaaa=$aaaa");
		$tmstp = mktime($h, $mn, $s, $mm, $jj, $aaaa);
#Misc::debug($tmstp);
		if (strtolower($str_format == '%nixtmstp'))
			return $tmstp;

		$search = array('%jour.', '%jour', '%jj', '%mois.', '%mois', '%mm', '%aaaa', '%h', '%mn', '%sec');

		if (!($s + $mn + $h + $jj + $mm + $aaaa)) {
			// tout est à 0, on formate différemment
			$replace = array('', '', '%02d', '', '', '%02d', '%04d', '%02d', '%02d', '%02d');
			$format = str_replace($search, $replace, $str_format);

			return sprintf($format, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
		}

		$replace = array('%a', '%A', '%d', '%b', '%B', '%m', '%Y', '%H', '%M', '%S');
		$format = str_replace($search, $replace, $str_format);

		$locales = array('en' => 'en_GB', 'fr' => 'fr_FR', 'de' => 'de_DE');
		$_locale = (string) $str_locale;
		if (empty($_locale) || !array_key_exists($_locale, $locales))
			$_locale = 'en';

		setlocale(LC_TIME, $_locale, $locales[$_locale]);
		setlocale(LC_TIME, $_locale, $locales[$_locale] . '.utf8');

		return utf8_encode(strftime($format, $tmstp));
	}
	
	
	/**
	 * @access public
	 * @param string $str_date 
	 * @param string $str_format 
	 * @return string
	 */
	public final static function formatDateFrToUs($str_date, $str_format) {
		return date("$str_format", strtotime($str_date));
	}

	/**
	 * @access public
	 * @param float $flo_weight 
	 * @param string $str_locale
	 * @return string
	 */
	public final static function formatWeight($flo_weight, $str_locale = 'fr') {
		// on commence par "nettoyer" pour n'avoir que des octets
		$flo_weight = Misc::returnBytes($flo_weight);

		$locales = array('en' => array('bytes', 'Kb', 'Mb', 'Gb'), 'fr' => array('octets', 'Ko', 'Mo', 'Go'), 'de' => array('Bytes', 'KB', 'MB', 'GB'));
		$_locale = (string) $str_locale;
		if (empty($_locale) || !in_array($_locale, $locales))
			$_locale = 'en';
		$_weight = (float) $flo_weight;

		if ($_weight < 1024)
			return $_weight . ' ' . $locales[$_locale][0];
		elseif ($_weight / 1024 < 1024)
			return round($_weight / 1024, 2) . ' ' . $locales[$_locale][1];
		elseif ($_weight / pow(1024, 2) < 1024)
			return round($_weight / pow(1024, 2), 2) . ' ' . $locales[$_locale][2];
		else
			return round($_weight / pow(1024, 3), 2) . ' ' . $locales[$_locale][3];
	}

	public final static function returnBytes($val) {
		$val = trim($val);
		$last = strtolower($val[strlen($val) - 1]);
		switch ($last) {
			// Le modifieur 'G' est disponible depuis PHP 5.1.0
			case 'g':
				$val *= 1024;
			case 'm':
				$val *= 1024;
			case 'k':
				$val *= 1024;
		}

		return $val;
	}

	/**
	 * @access public
	 * @param string $str_data 
	 * @param boolean $bool_display 
	 * @return void
	 */
	public final static function debug($str_data, $bool_display = true) {
		if ($bool_display) {
			echo '<pre>';
			print_r($str_data);
			echo '</pre>';
		} elseif ($fp = fopen(ROOT_DIR . '/logs/misc_' . date('Ymd') . '.log', 'a')) {
			fputs($fp, date('H:i:s') . "\n" . var_export($str_data, true) . "\n-------------------------------\n");
			fclose($fp);
		}
	}

	public final static function castFloat($mix_data) {
		$data = str_replace(',', '.', $mix_data);
		return (float) $data;
	}

	public final static function strip_tags_attributes($string, $allowtags = NULL, $allowattributes = NULL) {
		$string = strip_tags($string, $allowtags);
		if (!is_null($allowattributes)) {
			if (!is_array($allowattributes))
				$allowattributes = explode(",", $allowattributes);
			if (is_array($allowattributes))
				$allowattributes = implode(")(?<!", $allowattributes);
			if (strlen($allowattributes) > 0)
				$allowattributes = "(?<!" . $allowattributes . ")";
			$string = preg_replace_callback("/<[^>]*>/i", create_function(
											'$matches', 'return preg_replace("/ [^ =]*' . $allowattributes . '=(\"[^\"]*\"|\'[^\']*\')/i", "", $matches[0]);'
							), $string);
		}
		return $string;
	}

	public final static function delayLevel($curLevel, $nextLevel) {
		return Misc::delayImgLevel($curLevel, $nextLevel);
		$delay = '';
		for ($l = 0; $l < $curLevel - 1; $l++)
			$delay .= '&nbsp;&nbsp;|&nbsp;';
		if ($curLevel > 0) {
			if ($nextLevel >= $curLevel)
				$delay .= '&nbsp;├-&nbsp;';
			else
				$delay .= '&nbsp;└-&nbsp;';
		}
		return $delay;
	}

	public final static function delayImgLevel($curLevel, $nextLevel) {
		$delay = '';
		for ($l = 0; $l < $curLevel - 1; $l++)
			$delay .= '<img src="../i/v.png" alt="|"/>';
		if ($curLevel > 0) {
			if ($nextLevel >= $curLevel)
				$delay .= '<img src="../i/vhv.png" alt="├"/><img src="../i/h.png" alt="-"/>';
			else
				$delay .= '<img src="../i/vh.png" alt="└"/><img src="../i/h.png" alt="-"/>';
		}
		return $delay;
	}

	public final static function delayLevelList($rubric, $prevLevel, $nextLevel, $editMode = false) {
		$li = '';
		//if ($rubric->getLevel() == $prevLevel){
		$li = '<li id="R' . $rubric->getID() . '">';
		if ($editMode)//' . $rubric->getID() . '
			$li .= '<div onmouseover="addREPanel(this, ' . $rubric->getNiveau() . ')">' . $rubric->getNomInterne() . '</div> ';
		else
			$li .= $rubric->getNomInterne();
		if ($rubric->getNiveau() == $nextLevel)
			$li .= '</li>';
		if ($rubric->getNiveau() < $nextLevel)
			$li .= '<ul>';
		if ($rubric->getNiveau() > $nextLevel) {
			$li .= '</li>';
			for ($i = 0; $i < $rubric->getNiveau() - $nextLevel; $i++)
				$li .='</ul></li>';
		}

		return $li;
	}

	public final static function forceDownload($str_data, $str_fileName, $str_type = 'text/csv') {
		header("Content-disposition: attachment; filename=$str_fileName");
		header("Content-Type: application/pdf");
		header("Content-Transfer-Encoding: $str_type\n"); // Surtout ne pas enlever le \n
		header("Content-Length: " . strlen($str_data));
		header("Pragma: no-cache");
		header("Cache-Control: must-revalidate, post-check=0, pre-check=0, public");
		header("Expires: 0");
		echo $str_data; // utf8_decode($data) ;
	}


	public final static function hmac_sha1 ($key, $data) {
		$length = 64; // block length for SHA1
		if (strlen($key) > $length) { $key = pack("H*",sha1($key)); }
		$key  = str_pad($key, $length, chr(0x00));
		$ipad = str_pad('', $length, chr(0x36));
		$opad = str_pad('', $length, chr(0x5c));
		$k_ipad = $key ^ $ipad ;
		$k_opad = $key ^ $opad;

		return sha1($k_opad  . pack("H*",sha1($k_ipad . $data)));
	}	
}

?>
